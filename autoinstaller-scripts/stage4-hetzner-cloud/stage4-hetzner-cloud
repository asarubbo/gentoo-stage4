#!/bin/bash

# See also: https://blogs.gentoo.org/ago/2019/03/20/install-gentoo-in-less-than-one-minute/

clear

GITHUB="https://github.com/asarubbo/gentoo-stage4/raw/master"

####### USER CONFIGS
#STAGE4_URL="https://dev.gentoo.org/~ago/stage4/stage4-hardened-20240508.tar.xz" ; MD5SUM="680c9171f81103bf8a42c70bbe04d6ba"
#STAGE4_URL="https://dev.gentoo.org/~ago/stage4/stage4-standard-20240508.tar.xz" ; MD5SUM="7e11f5551c38e19156a6c3f78ddd45de"

DISK="/dev/sda"
ESP="/dev/sda1"
BOOT="/dev/sda2"
ROOT="/dev/sda3"

ROOTFS_MKFS_COMMAND=" -t btrfs -f "  #use BTRFS, force formatting
#ROOTFS_MKFS_COMMAND=" -t ext4 -f "  #use ext4, force formatting
ROOT_PASSWORD=`cat /dev/urandom | tr -dc a-zA-Z0-9 | fold -w 14 | head -n 1`
########## END USER CONFIGS

LOCALTIME_URL="${GITHUB}/misc/CET"
PARTED_URL="${GITHUB}/misc/parted.txt"
MOUNTPOINT="/mnt/gentoo"
INITIAL_PWD="$( pwd )"
NPROC="$( nproc )"

echo -ne "\nBefore to run this script you need to configure the basics in the script itself\n\nThis script will COMPLETELY erase your disk ${DISK} (see line 56)\n"
read -r -p "Are you sure? [y/N] " RESPONSE
RESPONSE=${RESPONSE,,}
if [[ ! "$RESPONSE" =~ ^(yes|y)$ ]]
then
    echo "There was no confirmation, so aborting..."
    exit 1
fi

if [ -z "${STAGE4_URL}" ]
then
        echo "You need to delete the comment from one of the available STAGE4_URL and its MD5SUM and relaunch the script"
        exit 1
fi

function die () {
        if [ "${?}" != "0" ]
        then
                echo "Something went wrong; aborting... $1"
                exit 1
        fi
}

echo "DATE/NTP"
rm -fr /etc/localtime || die "Unable to remove /etc/localtime"
curl -s -q -L "${LOCALTIME_URL}" --output /etc/localtime || die "Unable to download CET from github"
ntpdate -b time.ien.it > /dev/null 2>&1
hwclock -w || die "Unable to synch the time (hwclock)"

echo "PREP THE DISK"
dd if=/dev/zero of="${DISK}" bs=512 count=1 conv=notrunc > /dev/null 2>&1 || die "Unable to erase the disk with dd"

cd /tmp/
curl -s -q -L "${PARTED_URL}" --output parted.txt || die "Unable to download parted.txt from github"
sed "s:CHANGEME:${DISK}:" -i parted.txt || die "Unable to sed on parted.txt"
parted -a optimal < ./parted.txt >> ${LOG_FILE} 2>&1 || die

echo "MAKE FILESYSTEMS"
mkfs.ext4 -F "${BOOT}" > /dev/null 2>&1 || die "Unable to run mkfs.ext4 on BOOT partition"
mkfs ${ROOTFS_MKFS_COMMAND}   "${ROOT}" 2>&1 || die "Unable to run mkfs on ROOT partition"
mkdir -p "${MOUNTPOINT}" || die "Unable to mkdir the MOUNTPOINT for the ROOT partition"
mount "${ROOT}" "${MOUNTPOINT}" || die "Unable to mount the ROOT partition on its MOUNTPOINT"
mkdir -p "${MOUNTPOINT}"/boot || die "Unable to mkdir the MOUNTPOINT for the BOOT partition"
mount "${BOOT}" "${MOUNTPOINT}"/boot || die "Unable to mount the BOOT partition on its MOUNTPOINT"
cd "${MOUNTPOINT}" || die "Unable to cd the MOUNTPOINT"

echo "DOWNLOAD IN PROGRESS..."
curl -s -q -L "${STAGE4_URL}" --output stage4.tar.xz || die "Unable to download the stage4 archive"
echo "MD5SUM CHECK IN PROGRESS..."
CURRENT_MD5SUM="$( md5sum stage4.tar.xz | awk '{print $1}' )"
if [ "${CURRENT_MD5SUM}" != "${MD5SUM}" ]
then
	echo "The MD5SUM check failed!!!!"
	echo "This mean that you downloaded the wrong tarball, or you are a victim of a man-in-the-middle attack"
	echo "Please abort immediately"
	echo "The current md5sum of the archive is: ${CURRENT_MD5SUM}"
	echo "The expected md5sum of the archive is: ${MD5SUM}"
	die
fi

echo "MD5SUM CHECK DONE..."
echo "DECOMPRESSION IN PROGRESS..."
tar -xJpf stage4.tar.xz || die "Unable to decompress the stage4 archive"
echo "DECOMPRESSION DONE..."
rm -fr stage4.tar.xz || die "Unable to remove the stage4 archive"


####
test -z "${NPROC}" && NPROC="1"
sed "s:j4:j${NPROC}:" -i etc/portage/make.conf || die "Unable to replace NPROC in make.conf"
sed "s:BOOT:${BOOT}:" -i etc/fstab || die "Unable to replace BOOT in fstab"
sed "s:ROOT:${ROOT}:" -i etc/fstab etc/default/grub || die "Unable to replace ROOT in fstab"
sed '/EFI/d' -i etc/fstab || die "Unable to replace EFI in fstab"
####

echo "NETWORK SETUP"
IP_ADDRESS="$( ifconfig eth0 | grep "inet " | awk '{print $2}' )"
NETMASK="$( ifconfig eth0 | grep "inet " | awk '{print $4}' )"
BROADCAST="$( ifconfig eth0 | grep "inet " | awk '{print $6}' )"

test -z "${IP_ADDRESS}" && die "Unable to get the IP_ADDRESS variable"
test -z "${NETMASK}" && die "Unable to get the NETMASK variable"
test -z "${BROADCAST}" && die "Unable to get the BROADCAST variable"

cat >> etc/conf.d/net <<EOF || die "Unable to write /etc/conf.d/net"
config_eth0="${IP_ADDRESS} netmask ${NETMASK} brd ${BROADCAST}"
routes_eth0="172.31.1.1 scope link
169.254.0.0/16 scope link metric 1002
default via 172.31.1.1"
EOF


mkdir dev proc run sys tmp > /dev/null 2>&1 || die "Unable to mkdir 'dev proc run sys tmp'"
mount -t proc proc "${MOUNTPOINT}"/proc || die "Unable to mount /proc"
mount --rbind /sys "${MOUNTPOINT}"/sys || die "Unable to mount /sys"
mount --rbind /dev "${MOUNTPOINT}"/dev || die "Unable to mount /dev"


echo "KERNEL"
rm -fr "${MOUNTPOINT}"/boot/*gentoo-sources-image* "${MOUNTPOINT}"/lib/modules/* || die "Unable to remove the gentoo-sources-image kernel"

echo "CHROOT COMMANDS"
export DISK="${DISK}"

echo -ne "\n\nGRUB:\n"

chroot "${MOUNTPOINT}" /bin/bash -c 'PATH="/usr/sbin:/usr/bin:/sbin:/bin" grub-install $DISK' || die "Unable to run grub-install"
chroot "${MOUNTPOINT}" /bin/bash -c 'PATH="/usr/sbin:/usr/bin:/sbin:/bin" grub-mkconfig -o /boot/grub/grub.cfg' || die "Unable to run grub-mkconfig"
chroot "${MOUNTPOINT}" /bin/bash -c 'PATH="/usr/sbin:/usr/bin:/sbin:/bin" rc-update add net.eth0 default' > /dev/null 2>&1 || die "Unable to run rc-update"
echo "root:{$ROOT_PASSWORD}" | chroot "${MOUNTPOINT}" /bin/bash -c 'PATH="/usr/sbin:/usr/bin:/sbin:/bin" chpasswd' >> ${LOG_FILE} || die "Unable to run chpasswd"


rm -fr root/.ssh/authorized_keys || die "Unable to remove authorized_keys"

if [ -f "${INITIAL_PWD}"/id_rsa.pub ]
then
        echo "Copying public key from id_rsa.pub to target"
        cp "${INITIAL_PWD}"/id_rsa.pub root/.ssh/authorized_keys || die "Unable to copy pubkey to authorized_keys"
else
        if [ -f "${INITIAL_PWD}"/.ssh/authorized_keys ]
        then
            echo "Copying authorized keys to target"
            cp "${INITIAL_PWD}"/.ssh/authorized_keys root/.ssh/authorized_keys || die "Unable to copy authorized_keys"
        else
            echo "No ssh keys found, you will have to set it up manually"
        fi        
fi

echo -ne "LSPCI -k:\n$( lspci -k | grep "Kernel\ driver" | sort | uniq )\n\nLSMOD:\n$( lsmod )\n" > "${MOUNTPOINT}"/root/.modules_info || die "Unable to write .modules_info"


echo "Your root password was set to ${ROOT_PASSWORD} "
echo -ne "\n\n\nTHE STAGE4 INSTALLATION HAS BEEN COMPLETED....HAVE A NICE DAY ;)\n"
